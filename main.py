import os
import discord
from discord.ext import commands
from discord import app_commands
from discord.ui import View, Button, Modal, Select, TextInput

import datetime
import asyncio
import pytz

from myserver import server_on
from enum import Enum

bot = commands.Bot(command_prefix='!', intents=discord.Intents.all())
tree = bot.tree
local_tz = pytz.timezone('Asia/Bangkok')  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏£‡∏∞‡πÄ‡∏ó‡∏®‡πÑ‡∏ó‡∏¢
# ‡∏ï‡∏±‡∏ß‡πÅ‡∏õ‡∏£‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ö‡∏≠‡∏™‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô + ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏´‡∏•‡∏≤‡∏¢‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
boss_notifications = {}  # {guild_id: [{"boss_name": "..", "spawn_time": datetime, "owner": ".."}]} ‚úÖ
boss_roles = {}  # {guild_id: role_id}  # ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ó‡πá‡∏Å Role ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ô‡∏Å‡∏î‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® ‚úÖ
admin_roles = {}  # {guild_id: role_name}
update_log_channels = {}  # {guild_id: channel_id}
guild_active_roles = {}  # {guild_id: {guild_name: role_id}}
broadcast_channels = {}  # ‚úÖ
boss_channels = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤ channel_id ‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå ‚úÖ
role_notifications = {}  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• role ‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÅ‡∏ó‡πá‡∏Å‡∏ï‡∏≠‡∏ô‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏™ ‚úÖ
# Dictionary ‡πÄ‡∏Å‡πá‡∏ö‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥
active_rooms = {}  # {guild_id: channel_id}
emoji_bp = {}  # {guild_id: {emoji: point}}
user_scores = {}  # {guild_id: {user_id: score}}

# -------------------------------------------------------
@bot.event
async def on_ready():
    print("Bot Online!")
    try:
        synced = await bot.tree.sync()
        print(f"‚úÖ Synced {len(synced)} commands")
    except Exception as e:
        print(f"‚ùå Error syncing commands: {e}")

# --------------------------------------------------

# ----------- BossName(Enum) ‚úÖ-----------
class BossName(Enum):
    HOTURA = "Lower Cave"
    CAVE_7 = "Cave 7"
    CAVE_8 = "Cave 8"
    CAVE_9 = "Cave 9"
    RCAVE_2 = "Rcave 2"
    RCAVE_3 = "Rcave 3"
    RCAVE_4 = "Rcave 4"
    RUINED_KNIGHT = "Ruined Knight"
    TANDALLON = "Tandallon"
    DEFGIO = "Dergio"

# ----------- ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠ Owner -----------
class OwnerType(Enum):
    KNIGHT = "knight"
    BISHOP = "bishop"

    @classmethod
    def from_value(cls, value):
        for boss in cls:
            if boss.value == value:
                return boss
        return None

# ----------- ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏î‡πâ -----------
class JobChoicesEnum(discord.Enum):
    SNIPER = "Sniper"
    CLERIC = "Cleric"
    MAGE = "Mage"
    ASSASSIN = "Assassin"
    IMPALER = "Impaler"
    KNIGHT = "Knight"
    GENERAL = "General"
    SLAYER = "Slayer"

class GuildRoleManager:
    def __init__(self):
        self.guild_roles = {}

    def set_guild_roles(self, roles):
        self.guild_roles = roles

    def remove_guild_role(self, guild_name):
        if guild_name in self.guild_roles:
            del self.guild_roles[guild_name]

    def get_role_id(self, guild_name):
        return self.guild_roles.get(guild_name)

guild_role_manager = GuildRoleManager()
admin_role_name = None  # Initially unset
update_log_channel_id = None  # Initially unset

#----------- setroom -----------
@bot.tree.command(name="setroom", description="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏ó ‡πÄ‡∏ä‡πà‡∏ô ‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏≠‡∏™ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï ‡πÅ‡∏•‡∏∞‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏Ñ‡∏™‡∏ï‡πå")
@app_commands.choices(
    room_type=[
        app_commands.Choice(name="‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏™", value="boss_channel"),
        app_commands.Choice(name="‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", value="update_log"),
        app_commands.Choice(name="‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏≠‡∏ó‡∏ó‡∏≥‡∏á‡∏≤‡∏ô", value="active_room"),
        app_commands.Choice(name="‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏Ñ‡∏™‡∏ï‡πå", value="broadcast"),
    ],
    action=[
        app_commands.Choice(name="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", value="set"),
        app_commands.Choice(name="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", value="edit"),
        app_commands.Choice(name="‡∏•‡∏ö", value="remove"),
        app_commands.Choice(name="‡∏î‡∏π‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", value="view"),
    ]
)
async def setroom(interaction: discord.Interaction, room_type: app_commands.Choice[str],
                  action: app_commands.Choice[str], channel: discord.TextChannel = None):
    guild_id = interaction.guild_id

    # ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏î‡∏π‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤
    if action.value == "view":
        room_dict = {
            "boss_channel": boss_channels,
            "update_log": update_log_channels,
            "active_room": active_rooms,
            "broadcast": broadcast_channels
        }
        room_id = room_dict.get(room_type.value, {}).get(guild_id)
        if room_id:
            room = bot.get_channel(room_id)
            room_mention = room.mention if room else f"‚ùå ‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏û‡∏ö (ID: {room_id})"
            await interaction.response.send_message(f"üîπ ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà: {room_mention}", ephemeral=True)
        else:
            await interaction.response.send_message(f"‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á {room_type.name}", ephemeral=True)
        return

    # ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ set/edit/remove
    if not channel and action.value in ["set", "edit", "remove"]:
        return await interaction.response.send_message("‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", ephemeral=True)

    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á
    if action.value == "set":
        if room_type.value == "broadcast":
            if guild_id not in broadcast_channels:
                broadcast_channels[guild_id] = []
            broadcast_channels[guild_id].append(channel.id)
        else:
            room_dict = {
                "boss_channel": boss_channels,
                "update_log": update_log_channels,
                "active_room": active_rooms,
            }
            room_dict[room_type.value][guild_id] = channel.id

        await interaction.response.send_message(
            f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á {channel.mention} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {room_type.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)

    # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡πâ‡∏≠‡∏á (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö set)
    elif action.value == "edit":
        if room_type.value == "broadcast":
            return await interaction.response.send_message(
                "‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡πâ‡∏≠‡∏á‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏Ñ‡∏™‡∏ï‡πå‡πÑ‡∏î‡πâ ‡πÇ‡∏õ‡∏£‡∏î‡πÉ‡∏ä‡πâ `remove` ‡πÅ‡∏•‡πâ‡∏ß `set` ‡πÉ‡∏´‡∏°‡πà", ephemeral=True)

        room_dict = {
            "boss_channel": boss_channels,
            "update_log": update_log_channels,
            "active_room": active_rooms,
        }
        room_dict[room_type.value][guild_id] = channel.id

        await interaction.response.send_message(
            f"‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô {channel.mention} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö {room_type.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)

    # ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
    elif action.value == "remove":
        if room_type.value == "broadcast":
            if guild_id in broadcast_channels and channel.id in broadcast_channels[guild_id]:
                broadcast_channels[guild_id].remove(channel.id)
                await interaction.response.send_message(f"‚úÖ ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á {channel.mention} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏Ñ‡∏™‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß!",
                                                        ephemeral=True)
            else:
                await interaction.response.send_message(f"‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á {channel.mention} ‡πÉ‡∏ô‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏Ñ‡∏™‡∏ï‡πå!", ephemeral=True)
        else:
            room_dict = {
                "boss_channel": boss_channels,
                "update_log": update_log_channels,
                "active_room": active_rooms,
            }
            if guild_id in room_dict[room_type.value]:
                del room_dict[room_type.value][guild_id]
                await interaction.response.send_message(f"‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á {room_type.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!",
                                                        ephemeral=True)
            else:
                await interaction.response.send_message(f"‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á {room_type.name} ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ",
                                                        ephemeral=True)
#----------- setrole -----------
@bot.tree.command(name="setrole", description="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Role ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏≠‡∏ó ‡πÄ‡∏ä‡πà‡∏ô Role ‡∏ö‡∏≠‡∏™, ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô ‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏•‡∏î‡πå")
@app_commands.choices(
    role_type=[
        app_commands.Choice(name="Role ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏™", value="boss_role"),
        app_commands.Choice(name="Role ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô", value="admin_role"),
        app_commands.Choice(name="Role ‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå", value="guild_role"),
    ],
    action=[
        app_commands.Choice(name="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", value="set"),
        app_commands.Choice(name="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", value="edit"),
        app_commands.Choice(name="‡∏•‡∏ö", value="remove"),
        app_commands.Choice(name="‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", value="view"),
    ]
)
async def setrole(
    interaction: discord.Interaction,
    role_type: app_commands.Choice[str],
    action: app_commands.Choice[str],
    role: discord.Role = None,
    guild_name: str = None
):
    guild_id = interaction.guild_id

    # ---------------------- ‡∏î‡∏π‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ ----------------------
    if action.value == "view":
        role_dict = {
            "boss_role": boss_roles,
            "admin_role": admin_roles,
            "guild_role": guild_active_roles
        }
        if role_type.value == "guild_role":
            roles_info = "\n".join([f"üîπ {g_name}: <@&{r_id}>" for g_name, r_id in role_dict["guild_role"].get(guild_id, {}).items()])
            response = roles_info if roles_info else "‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Role ‡∏Å‡∏¥‡∏•‡∏î‡πå"
        else:
            role_id = role_dict[role_type.value].get(guild_id)
            response = f"üîπ Role ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤: <@&{role_id}>" if role_id else f"‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ {role_type.name}"
        return await interaction.response.send_message(response, ephemeral=True)

    # ---------------------- ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö input ----------------------
    if not role and action.value in ["set", "edit", "remove"]:
        return await interaction.response.send_message("‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏ Role ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤", ephemeral=True)

    if role_type.value == "guild_role" and not guild_name:
        return await interaction.response.send_message("‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Role ‡∏Å‡∏¥‡∏•‡∏î‡πå", ephemeral=True)

    # ---------------------- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Role ----------------------
    if action.value == "set":
        if role_type.value == "guild_role":
            if guild_id not in guild_active_roles:
                guild_active_roles[guild_id] = {}
            guild_active_roles[guild_id][guild_name] = role.id
        else:
            role_dict = {
                "boss_role": boss_roles,
                "admin_role": admin_roles
            }
            role_dict[role_type.value][guild_id] = role.id

        await interaction.response.send_message(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ {role.mention} ‡πÄ‡∏õ‡πá‡∏ô {role_type.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)

    # ---------------------- ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Role (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö set) ----------------------
    elif action.value == "edit":
        if role_type.value == "guild_role":
            if guild_id in guild_active_roles and guild_name in guild_active_roles[guild_id]:
                guild_active_roles[guild_id][guild_name] = role.id
            else:
                return await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Role ‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", ephemeral=True)
        else:
            role_dict = {
                "boss_role": boss_roles,
                "admin_role": admin_roles
            }
            role_dict[role_type.value][guild_id] = role.id

        await interaction.response.send_message(f"‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô {role_type.name} ‡πÄ‡∏õ‡πá‡∏ô {role.mention} ‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)

    # ---------------------- ‡∏•‡∏ö Role ----------------------
    elif action.value == "remove":
        if role_type.value == "guild_role":
            if guild_id in guild_active_roles and guild_name in guild_active_roles[guild_id]:
                del guild_active_roles[guild_id][guild_name]
                await interaction.response.send_message(f"‚úÖ ‡∏•‡∏ö Role ‡∏Ç‡∏≠‡∏á‡∏Å‡∏¥‡∏•‡∏î‡πå **{guild_name}** ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)
            else:
                await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö Role ‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö", ephemeral=True)
        else:
            role_dict = {
                "boss_role": boss_roles,
                "admin_role": admin_roles
            }
            if guild_id in role_dict[role_type.value]:
                del role_dict[role_type.value][guild_id]
                await interaction.response.send_message(f"‚úÖ ‡∏•‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ {role_type.name} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!", ephemeral=True)
            else:
                await interaction.response.send_message(f"‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Role {role_type.name} ‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ", ephemeral=True)

#----------- boss -----------
@bot.tree.command(name="boss", description="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏™ ‡∏´‡∏£‡∏∑‡∏≠‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏Ñ‡∏™‡∏ï‡πå‡∏ö‡∏≠‡∏™")
@app_commands.choices(
    boss_action=[
        app_commands.Choice(name="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏™", value="notification"),
        app_commands.Choice(name="‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏Ñ‡∏™‡∏ï‡πå‡∏ö‡∏≠‡∏™", value="broadcast"),
    ],
    sub_action=[
        app_commands.Choice(name="‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", value="list"),
        app_commands.Choice(name="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", value="edit"),
        app_commands.Choice(name="‡∏•‡∏ö‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", value="remove"),
    ]
)
async def boss(
        interaction: discord.Interaction,
        boss_action: app_commands.Choice[str],
        sub_action: app_commands.Choice[str] = None,
        boss_name: BossName = None,
        hours: int = None,
        minutes: int = None,
        owner: OwnerType = None,
        date: str = None,
        time: str = None
):
    guild_id = interaction.guild_id

    # ---------------------- ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏™ ----------------------
    if boss_action.value == "notification" and not sub_action:
        await interaction.response.defer(thinking=True)  # ‡πÅ‡∏à‡πâ‡∏á Discord ‡∏ß‡πà‡∏≤‡∏ö‡∏≠‡∏ó‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•

        now = datetime.datetime.now(local_tz)
        spawn_time = now + datetime.timedelta(hours=hours, minutes=minutes)  # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì spawn_time

        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö dictionary ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô KeyError
        if guild_id not in boss_notifications:
            boss_notifications[guild_id] = []

        boss_notifications[guild_id].append({
            "boss_name": boss_name.name,
            "spawn_time": spawn_time,
            "owner": owner.value
        })

        role = boss_roles.get(guild_id)
        role_mention = f"<@&{role}>" if role else "@everyone"

        await interaction.followup.send(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏™ {boss_name.value} ‡πÄ‡∏ß‡∏•‡∏≤ {hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {minutes} ‡∏ô‡∏≤‡∏ó‡∏µ!",
                                        ephemeral=True)

        # ‡πÉ‡∏ä‡πâ asyncio.create_task() ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏Ñ‡πâ‡∏≤‡∏á
        asyncio.create_task(schedule_boss_notifications(guild_id, boss_name.name, spawn_time, owner.value, role))

        # 1Ô∏è‚É£ ‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏™ (‚ö° ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏° "üì¢ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®")
        if sub_action and sub_action.value == "list":
            await interaction.response.defer(thinking=True)
            if guild_id not in boss_notifications or not boss_notifications[guild_id]:
                return await interaction.followup.send("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏≠‡∏™‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", ephemeral=True)

            now = datetime.datetime.now(local_tz)
            valid_notifications = [
                notif for notif in boss_notifications[guild_id] if notif["spawn_time"] > now
            ]

            if not valid_notifications:
                return await interaction.followup.send("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ö‡∏≠‡∏™‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", ephemeral=True)

            sorted_notifications = sorted(valid_notifications, key=lambda x: x["spawn_time"])
            embed = discord.Embed(title="üìú ùêÅùê®ùê¨ùê¨ ùêíùê©ùêöùê∞ùêß ùêãùê¢ùê¨ùê≠", color=discord.Color.blue())

            for idx, notif in enumerate(sorted_notifications[:10], start=1):  # ‡∏à‡∏≥‡∏Å‡∏±‡∏î 10 ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
                boss_name = notif["boss_name"].replace("_", " ")
                spawn_time = notif["spawn_time"].astimezone(local_tz).strftime("%H:%M")
                owner = notif["owner"]
                embed.add_field(name=f"{idx}. ùêÅùê®ùê¨ùê¨ Ôπï{boss_name} ùêéùê∞ùêßùêûùê´ Ôπï{owner}",
                                value=f"ùêíùê©ùêöùê∞ùêß Ôπï{spawn_time}",
                                inline=False)

            # ‚úÖ ‡∏õ‡∏∏‡πà‡∏° "üì¢ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®"
            class ConfirmView(discord.ui.View):
                def __init__(self, embed):
                    super().__init__(timeout=60)
                    self.embed = embed

                @discord.ui.button(label="üì¢ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®", style=discord.ButtonStyle.green)
                async def announce(self, interaction: discord.Interaction, button: discord.ui.Button):
                    await interaction.response.defer()

                    channel_id = boss_channels.get(guild_id)
                    if not channel_id:
                        return await interaction.followup.send("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏™!", ephemeral=True)

                    channel = interaction.guild.get_channel(channel_id)
                    if not channel:
                        return await interaction.followup.send("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡πà‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô!", ephemeral=True)

                    # ‚úÖ ‡∏î‡∏∂‡∏á Role ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ó‡πá‡∏Å
                    role_id = boss_roles.get(guild_id)
                    role_mention = f"<@&{role_id}>" if role_id else "@everyone"

                    await channel.send(f"üì¢ **„Äêùêìùê¢ùê¶ùêû ùê¢ùêß ùê†ùêöùê¶ùêû + ùüèùê°ùê´„Äë** {role_mention}", embed=self.embed)
                    await interaction.followup.send("‚úÖ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏®‡πÑ‡∏õ‡∏ó‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!", ephemeral=True)

            await interaction.followup.send(embed=embed, ephemeral=True, view=ConfirmView(embed))

        # 2Ô∏è‚É£ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏™
        elif sub_action and sub_action.value == "edit":
            if not boss_name or hours is None or minutes is None:
                return await interaction.response.send_message("‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≠‡∏™‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", ephemeral=True)

            now = datetime.datetime.now(local_tz)
            spawn_time = now + datetime.timedelta(hours=hours, minutes=minutes)

            if guild_id in boss_notifications:
                for notif in boss_notifications[guild_id]:
                    if notif["boss_name"] == boss_name.name:
                        notif["spawn_time"] = spawn_time
                        await schedule_boss_notifications(guild_id, boss_name.name, spawn_time, notif["owner"],
                                                          notif["role"])
                        break
                else:
                    return await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏≠‡∏™‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç", ephemeral=True)

            await interaction.response.send_message(
                f"‚úÖ ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏≠‡∏™ {boss_name.value} ‡πÄ‡∏õ‡πá‡∏ô {hours} ‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á {minutes} ‡∏ô‡∏≤‡∏ó‡∏µ!", ephemeral=True)

        # 3Ô∏è‚É£ ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ö‡∏≠‡∏™
        elif sub_action and sub_action.value == "remove":
            if not boss_name:
                return await interaction.response.send_message("‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ö‡∏≠‡∏™‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö", ephemeral=True)

            if guild_id in boss_notifications:
                boss_notifications[guild_id] = [
                    notif for notif in boss_notifications[guild_id] if notif["boss_name"] != boss_name.name
                ]

            await interaction.response.send_message(f"‚úÖ ‡∏•‡∏ö‡∏ö‡∏≠‡∏™ {boss_name.value} ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô!", ephemeral=True)

    # ---------------------- ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏Ñ‡∏™‡∏ï‡πå‡∏ö‡∏≠‡∏™ ----------------------
    elif boss_action.value == "broadcast":
        if not boss_name or not date or not time:
            return await interaction.response.send_message("‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô!", ephemeral=True)

        message = f"### ‚ú¶ÔΩû ùêÅùê®ùê¨ùê¨Ôπï{boss_name.value} ùêÉùêöùê≠ùêûÔπï{date} {time} ÔΩû‚ú¶"

        if guild_id in broadcast_channels:
            for channel_id in broadcast_channels[guild_id]:
                channel = bot.get_channel(channel_id)
                if channel:
                    await channel.send(message)
            await interaction.response.send_message("‚úÖ ‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏Ñ‡∏™‡∏ï‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", ephemeral=True)
        else:
            await interaction.response.send_message("‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÅ‡∏Ñ‡∏™‡∏ï‡πå!", ephemeral=True)

#----------- schedule boss notifications -----------
async def schedule_boss_notifications(guild_id, boss_name, spawn_time, owner, role):
    now = datetime.datetime.now(local_tz)

    # ‡∏Å‡∏£‡∏≠‡∏á‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏≠‡∏™‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏î
    valid_notifications = [
        notif for notif in boss_notifications[guild_id]
        if notif["spawn_time"] > now
    ]

    time_until_spawn = (spawn_time - now).total_seconds()
    time_before_five_min = max(time_until_spawn - 300, 0)
    owner_icon = "üíô" if owner == "knight" else "üíö"

    boss_display_name = BossName[boss_name].value

    print(f"[DEBUG] Scheduling boss: {boss_name} at {spawn_time} (in {time_until_spawn}s)")

    if time_before_five_min > 0:  # ‡∏£‡∏≠ 5 ‡∏ô‡∏≤‡∏ó‡∏µ‡∏Å‡πà‡∏≠‡∏ô‡∏ö‡∏≠‡∏™‡πÄ‡∏Å‡∏¥‡∏î
        await asyncio.sleep(time_before_five_min)

    if guild_id in boss_channels:
        channel_id = boss_channels[guild_id]
        channel = bot.get_channel(channel_id) or bot.get_channel(int(channel_id))
        if channel:
            embed = discord.Embed(
                title="ùêÅùê®ùê¨ùê¨ ùêçùê®ùê≠ùê¢ùêüùê¢ùêúùêöùê≠ùê¢ùê®ùêß!!",
                description=f"{owner_icon} ùêÅùê®ùê¨ùê¨ {boss_display_name} ùê¢ùê¨ ùê¨ùê©ùêöùê∞ùêßùê¢ùêßùê† ùê¢ùêß ùüì ùê¶ùê¢ùêßùêÆùê≠ùêûùê¨! <@&{role.id}>",
                color=discord.Color.yellow()
            )
            await channel.send(embed=embed)

    await asyncio.sleep(300)  # ‡∏£‡∏≠‡∏à‡∏ô‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ö‡∏≠‡∏™‡πÄ‡∏Å‡∏¥‡∏î
    if guild_id in boss_channels:
        channel_id = boss_channels[guild_id]
        channel = bot.get_channel(channel_id) or bot.get_channel(int(channel_id))
        if channel:
            embed = discord.Embed(
                title="ùêÅùê®ùê¨ùê¨ ùê°ùêöùê¨ ùê¨ùê©ùêöùê∞ùêß!!",
                description=f"{owner_icon} ùêÅùê®ùê¨ùê¨ {boss_display_name} ùê°ùêöùê¨ ùêíùê©ùêöùê∞ùêß ùêãùêûùê≠'ùê¨ ùêüùê¢ùê†ùê°ùê≠! <@&{role.id}>",
                color=discord.Color.red()
            )
            await channel.send(embed=embed)

# -------------------- ‡∏Ñ‡∏≥‡∏™‡∏±‡πà‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÑ‡∏î‡πâ‡πÅ‡∏•‡πâ‡∏ß 1--------------------

# ----------- ‡∏£‡∏∞‡∏ö‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏ä‡∏∑‡πà‡∏≠/‡∏≠‡∏≤‡∏ä‡∏µ‡∏û/‡∏Å‡∏¥‡∏•‡∏î‡πå -----------
# ----------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πåupdate -----------
@bot.tree.command(name="update_info_post", description="‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
async def update_info_post(interaction: discord.Interaction, channel: discord.TextChannel):
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Embed ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå
    embed = discord.Embed(
        title="‚úø ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≤‡∏á‡∏•‡πà‡∏≤‡∏á.",
        description="‚ï∞ ùêÇùê°ùê®ùê®ùê¨ùêû ùê≠ùê°ùêû ùêÆùê©ùêùùêöùê≠ùêû ùê≠ùê≤ùê©ùêû ùêõùêûùê•ùê®ùê∞.\n\n"
                    "‡πÇ‡∏ô‡πâ‡∏ïÔπï  ‡πÄ‡∏•‡∏Ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡πÅ‡∏•‡∏∞ ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏•‡∏î‡πå‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏£‡∏≠‡∏Å‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á\n"
                    "NoteÔπïMember ID and Guild Name must be correct.\n"
                    "‚ï∞„Éª eMystic ‚îÇ zMystic ‚îÇ ‡πÇ‡∏Æ‡πà‡∏á‡πÇ‡∏Æ‡πà‡∏á (Woof)",
        color=discord.Color.blue(),
    )
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á View ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°
    view = UpdateInfoView()

    # ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏õ‡∏∏‡πà‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    await channel.send(embed=embed, view=view)
    await interaction.response.send_message(f"‚úÖ ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ó‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡∏π‡∏Å‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÉ‡∏ô {channel.mention}", ephemeral=True)

# ----------- ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏î‡πâ‡∏ß‡∏¢‡∏õ‡∏∏‡πà‡∏° -----------
class UpdateInfoView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_item(UpdateButton("ùêçùêöùê¶ùêû", "name"))
        self.add_item(UpdateButton("ùêâùê®ùêõ", "job"))
        self.add_item(UpdateButton("ùêÜùêÆùê¢ùê•ùêù", "guild"))

class UpdateButton(discord.ui.Button):
    def __init__(self, label, update_type):
        super().__init__(label=label, style=discord.ButtonStyle.primary)
        self.update_type = update_type

    async def callback(self, interaction: discord.Interaction):
        await interaction.response.send_modal(UpdateModal(self.update_type))

class UpdateModal(discord.ui.Modal, title="ùêîùê©ùêùùêöùê≠ùêû ùêÖùê®ùê´ùê¶"):
    def __init__(self, update_type):
        super().__init__()
        self.update_type = update_type
        self.member_id = discord.ui.TextInput(label="ùêåùêûùê¶ùêõùêûùê´ ùêßùêÆùê¶ùêõùêûùê´", required=True, max_length=5)
        self.old_data = discord.ui.TextInput(label="ùêéùê•ùêù ùêÉùêöùê≠ùêö", required=True)
        self.new_data = discord.ui.TextInput(label="ùêçùêûùê∞ ùêÉùêöùê≠ùêö", required=True)
        self.add_item(self.member_id)
        self.add_item(self.old_data)
        self.add_item(self.new_data)

    async def on_submit(self, interaction: discord.Interaction):
        guild_id = interaction.guild_id
        log_channel_id = update_log_channels.get(guild_id)
        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
        user = interaction.user  # ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏™‡πà‡∏á‡∏ü‡∏≠‡∏£‡πå‡∏°
        avatar_url = user.avatar.url if user.avatar else user.default_avatar.url  # ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå

        # ‚úÖ ‡∏î‡∏∂‡∏á‡∏ß‡∏±‡∏ô‡πÄ‡∏ß‡∏•‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÄ‡∏õ‡πá‡∏ô Asia/Bangkok
        now = datetime.datetime.now(local_tz)
        formatted_date = now.strftime("%d/%m/%Y %H:%M")  # ‡πÅ‡∏õ‡∏•‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô DD/MM/YYYY HH:MM

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏´‡πâ‡∏≠‡∏á update log
        log_channel = bot.get_channel(log_channel_id) if log_channel_id else None
        if not log_channel:
            return await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á Update Log ‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤!",
                                                           ephemeral=True)

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• `member`
        member = interaction.guild.get_member(interaction.user.id)
        if not member:
            try:
                member = await bot.fetch_user(interaction.user.id)
            except discord.NotFound:
                return await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å!", ephemeral=True)

        if not member:
            return await interaction.response.send_message("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å!", ephemeral=True)

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Embed ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
        embed = discord.Embed(
            title="üìù ùêÉùêöùê≠ùêö ùêÆùê©ùêùùêöùê≠ùêû",
            description=f"‚Ä¢ ùê≠ùê≤ùê©ùêû\n"
                        f"‚ï∞  {self.update_type}\n"
                        f"‚Ä¢ ùê¶ùêûùê¶ùêõùêûùê´ ùêßùêÆùê¶ùêõùêûùê´{self.member_id.value}\n"
                        f"‚ï∞  {self.member_id.value}\n"
                        f"‚Ä¢ ùê®ùê•ùêù ùêùùêöùê≠ùêö ‚ñ∏ ùêßùêûùê∞ ùêùùêöùê≠ùêö\n"
                        f"‚ï∞  {self.old_data.value} ‚ñ∏ {self.new_data.value}",
            color=discord.Color.yellow(),
        )
        embed.set_thumbnail(url=avatar_url)  # ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏Å‡∏£‡∏≠‡∏Å‡∏ü‡∏≠‡∏£‡πå‡∏°
        embed.set_footer(text=f"ID: {user.id}")

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Å‡∏¥‡∏•‡∏î‡πå
        if self.update_type == "guild":
            old_guild = self.old_data.value
            new_guild = self.new_data.value

            old_role_id = guild_active_roles.get(guild_id, {}).get(old_guild)
            new_role_id = guild_active_roles.get(guild_id, {}).get(new_guild)

            old_role = interaction.guild.get_role(old_role_id) if old_role_id else None
            new_role = interaction.guild.get_role(new_role_id) if new_role_id else None

            if old_role and old_role in member.roles:
                await member.remove_roles(old_role)
            if new_role:
                await member.add_roles(new_role)

            embed.add_field(name="üìå ùêìùê´ùêöùêßùê¨ùêüùêûùê´ ùê†ùêÆùê¢ùê•ùêù", value=f"ùêåùê®ùêØùêû ùêüùê´ùê®ùê¶ {old_guild} ùêìùê® {new_guild}", inline=False)

        # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠
        elif self.update_type == "name":
            current_nickname = member.display_name
            if " - " in current_nickname:
                member_id, _ = current_nickname.split(" - ", 1)  # ‡πÅ‡∏¢‡∏Å‡πÄ‡∏•‡∏Ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏ä‡∏∑‡πà‡∏≠
                new_nickname = f"{member_id} - {self.new_data.value}"[:32]  # ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏Ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡πÄ‡∏î‡∏¥‡∏°
            else:
                new_nickname = self.new_data.value[:32]  # ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏•‡∏Ç‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÉ‡∏´‡∏°‡πà‡∏ï‡∏£‡∏á‡πÜ

            await member.edit(nick=new_nickname)
            embed.add_field(name="üìå ùêÇùê°ùêöùêßùê†ùêû ùêßùêöùê¶ùêû", value=f"ùêÇùê°ùêöùêßùê†ùêû ùê≠ùê® {self.new_data.value}", inline=False)

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á Update Log ‡πÅ‡∏•‡∏∞‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å
        await log_channel.send(embed=embed)
        await interaction.response.send_message(f"‚úÖ **{self.update_type}** ùêîùê©ùêùùêöùê≠ùêûùêù!!", ephemeral=True)

# ------------------------------------------------------- ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏ó‡∏™ ‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
def is_admin(member):
    """‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà"""
    guild_id = member.guild.id
    admin_role = admin_roles.get(guild_id)
    return admin_role and discord.utils.get(member.roles, name=admin_role)

@bot.tree.command(name="set_admin_role", description="‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Role ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô")
async def set_admin_role(interaction: discord.Interaction, role: discord.Role):
    guild_id = interaction.guild_id
    admin_roles[guild_id] = role.name  # ‡πÄ‡∏Å‡πá‡∏ö Role ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ï‡∏≤‡∏°‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå
    await interaction.response.send_message(f"‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Role ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏õ‡πá‡∏ô {role.mention} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ", ephemeral=True)

    @bot.tree.command(name='set_room_active', description='‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ö‡∏≠‡∏ó‡∏ó‡∏≥‡∏á‡∏≤‡∏ô')
    @app_commands.choices(action=[
        app_commands.Choice(name='‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤', value='set'),
        app_commands.Choice(name='‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç', value='edit'),
        app_commands.Choice(name='‡∏î‡∏π‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤', value='view')
    ])
    async def set_room_active(interaction: discord.Interaction, action: app_commands.Choice[str],
                              channel: discord.TextChannel = None):
        guild_id = interaction.guild_id

        if action.value == 'set':
            if not channel:
                return await interaction.response.send_message('‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤', ephemeral=True)
            active_rooms[guild_id] = channel.id
            await interaction.response.send_message(f'‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á {channel.mention} ‡πÉ‡∏´‡πâ‡∏ö‡∏≠‡∏ó‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß!', ephemeral=True)

        elif action.value == 'edit':
            if not channel:
                return await interaction.response.send_message('‚ùå ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤', ephemeral=True)
            if guild_id in active_rooms:
                del active_rooms[guild_id]  # ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°
            active_rooms[guild_id] = channel.id  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
            await interaction.response.send_message(f'‚úÖ ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô {channel.mention} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!',
                                                    ephemeral=True)

        elif action.value == 'view':
            if guild_id in active_rooms:
                room = bot.get_channel(active_rooms[guild_id])
                room_mention = room.mention if room else '‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏´‡πâ‡∏≠‡∏á'
                await interaction.response.send_message(f'üîπ ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà: {room_mention}', ephemeral=True)
            else:
                await interaction.response.send_message('‚ùå ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á', ephemeral=True)

    @bot.event
    async def on_reaction_add(reaction, user):
        if user.bot:
            return  # ‡∏Ç‡πâ‡∏≤‡∏°‡∏ö‡∏≠‡∏ó

        message = reaction.message
        guild_id = message.guild.id
        if guild_id not in active_rooms or message.channel.id != active_rooms[guild_id]:
            return  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î

        if guild_id not in admin_roles:
            return  # ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ Role ‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÑ‡∏ß‡πâ ‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô

        if not is_admin(user):
            return  # ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÅ‡∏≠‡∏î‡∏°‡∏¥‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô

        emoji = str(reaction.emoji)
        if emoji not in emoji_bp.get(guild_id, {}):
            return  # ‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà‡∏≠‡∏¥‡πÇ‡∏°‡∏à‡∏¥‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÑ‡∏ß‡πâ

        points = emoji_bp[guild_id][emoji]
        user_id = message.author.id
        if guild_id not in user_scores:
            user_scores[guild_id] = {}
        if user_id not in user_scores[guild_id]:
            user_scores[guild_id][user_id] = 0

        user_scores[guild_id][user_id] += points
# -------------------------------------------------------
server_on()

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô‡∏ö‡∏≠‡∏ó
bot.run(os.getenv('TOKEN'))
